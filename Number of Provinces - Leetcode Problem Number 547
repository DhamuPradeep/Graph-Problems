###USING DFS
class Solution {
public:

    void dfs(vector<bool>&visited,vector<int>adj[],int i,int n){
        if(i>=n || visited[i])
            return;
        visited[i] = true;
        for(auto j:adj[i])
            dfs(visited,adj,j,n);
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int>adj[n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(isConnected[i][j]){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<bool>visited(n,false);
        int provinces = 0;
        for(int i = 0;i<n;i++){
            if(!visited[i]){
                provinces++;
                dfs(visited,adj,i,n);
            }
        }
        return provinces;
    }
};
