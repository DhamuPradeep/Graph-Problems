class Solution {
public:

    void bfs(vector<bool>&visited,vector<int>adj[],int i,int n){
        queue<int>q;
        q.push(i);
        visited[i] = true;
        while(!q.empty()){
            int front = q.front();
            q.pop();
            for(auto j:adj[front]){
                if(!visited[j]){
                    visited[j] = true;
                    q.push(j);
                }
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int>adj[n];
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(isConnected[i][j]){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<bool>visited(n,false);
        int provinces = 0;
        for(int i = 0;i<n;i++){
            if(!visited[i]){
                provinces++;
                bfs(visited,adj,i,n);
            }
        }
        return provinces;
    }
};
